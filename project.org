* Notes
* Tasks
* Tutorial
** Installing OCaml and dependencies
** Initializing the project

   Create a basic project:

   #+BEGIN_SRC sh
   $ eliom-distillery -name reactive_tic_tack_toe -template basic.ppx
   #+END_SRC

*** What the basic project template includes

    ~cd~ into the directory and see what the template has set up for us:

    #+BEGIN_SRC sh
    $ cd reactive_tic_tack_toe
    $ ls
    Makefile                      README                        reactive_tic_tack_toe.eliom
    Makefile.options              reactive_tic_tack_toe.conf.in static
    #+END_SRC

    You should read the ~README~ for a helpful description of these files. But,
    here's a brief account of the essentials:

    - ~reactive_tic_tack_toe.eliom~ :: The code defining our site goes here.
    - ~static~ :: Static resources will go here, such as images and CSS files.
    - ~Makefile.options~ :: Configuration of the project goes here. We'll get to
         this later.

*** Building the project and running the test server

    To build the project and run the server, just execute

    #+BEGIN_SRC sh
    $ make test.byte
    #+END_SRC

    When you point your browser to http://localhost:8080/, you should see the default
    page.

    You can quite sever by pressing =Control+c= in the terminal.

    This is the basic cycle for running functional tests as the project
    develops:

**** Basic work flow

     1. Make changes.
     2. Build the project and run the server with ~make test.byte~.
     3. Check out the site by visiting http://localhost:8080/.
     4. Quit the server with =Control+C= and go back to (1).

*** The automatically generated files

    After the project builds, a number of files will be automatically generated.
    You don't need to worry about any of these, but a brief description of them
    will help demystify.

    - ~_client~, ~_server~ :: The compiled ocaml files for the client and
         server, respectively.
    - ~_deps~ :: Dependency information for the complied files.
    - ~local~ :: Files and logs used by the server.

*** Getting Tuareg and Merlin working correctly

    Tooling-wise, the OCaml ecosystem is currently in an awkward state. The
    tooling available is relatively powerful, feature rich, compact, and
    coherent, but the setup can be finicky and requires a lot of manual
    maintenance. These are some tips for coaxing the tooling to behave well on
    Eliom projects.

    Assuming you are using ~eliom-distillery~ to get started with a template,
    you'll need to add the following to your ~.merlin~ file to get all the merlin
    goodness:

    #+BEGIN_SRC merlin
    PKG eliom
    PKG eliom.client
    PKG eliom.ppx

    PKG ocsigenserver
    PKG ocsigen-toolkit

    PKG ppx_deriving
    PKG eliom.ppx.server
    PKG eliom.ppx.client

    S _client
    S _server

    B _client
    B _server
    #+END_SRC

